[{"categories":[""],"content":"Introduction Cron is a time-based job scheduler in Unix-like operating systems. It allows users to execute commands automatically at specified intervals or times. Cron is a powerful tool that can be used for a variety of tasks, from running backups to executing scripts, and its flexibility makes it a popular choice for system administrators and developers alike. Basic Concept Cron is a daemon that runs in the background and checks the /etc/crontab file and the /etc/cron.d directory for scheduled tasks. The syntax for the crontab file is as follows: * * * * * command to be executed - - - - - | | | | | | | | | +----- day of the week (0 - 6) (Sunday=0) | | | +------- month (1 - 12) | | +--------- day of the month (1 - 31) | +----------- hour (0 - 23) +------------- min (0 - 59) Each field can contain a single value, a comma-separated list of values, a range of values, or an asterisk (*), which represents all possible values. For example, the following line would run a script every day at midnight: 0 0 * * * /path/to/script.sh The cron daemon checks the crontab file every minute, and if a scheduled task is found, it executes the command at the specified time. Sample Usage Cron can be used for a wide range of tasks, from simple one-liners to complex scripts. Here are ten simple examples: Run a script every minute: * * * * * /path/to/script.sh Run a script at midnight every day: 0 0 * * * /path/to/script.sh Run a script every weekday at 9am: 0 9 * * 1-5 /path/to/script.sh Run a script every hour: 0 * * * * /path/to/script.sh Run a script every Sunday at midnight: 0 0 * * 0 /path/to/script.sh Run a script every other day at 3pm: 0 15 */2 * * /path/to/script.sh Run a script every 15 minutes: */15 * * * * /path/to/script.sh Run a script on the first of every month: 0 0 1 * * /path/to/script.sh Run a script at 2am every Sunday: 0 2 * * 0 /path/to/script.sh Run a script at 6am every weekday: 0 6 * * 1-5 /path/to/script.sh Here are ten more complex examples: Run a script every 10 minutes, except during the hours of 1am to 5am: */10 0,5-23 * * * /path/to/script.sh Run a script every weekday at 9am, except on holidays: 0 9 * * 1-5 [ $(date +\\\\%a) != \"Sat\" ] \u0026\u0026 [ $(date +\\\\%a) != \"Sun\" ] \u0026\u0026 /path/to/script.sh Run a script every hour, but only on weekdays: 0 * * * 1-5 /path/to/script.sh Run a script every Sunday at midnight, but only during the months of January, March, May, July, September, and November: 0 0 1,3,5,7,9,11 * 0 /path/to/script.sh Run a script every Friday at 11pm, but only during the month of December: 0 23 * 12 5 /path/to/script.sh Run a script every hour, but only during the hours of 9am to 5pm: 0 9-17 * * * /path/to/script.sh Run a script every 30 minutes, but only on weekdays and only during the hours of 9am to 5pm: */30 9-17 * * 1-5 /path/to/script.sh Run a script every 5 minutes, but only on the 15th and 30th of each month: */5 0 15,30 * * /path/to/script.sh Run a script every day at 6am, but only if a specific file exists: 0 6 * * * [ -f /path/to/file.txt ] \u0026\u0026 /path/to/script.sh Run a script every hour, but only if the system load is below a certain threshold: 0 * * * * [ $(uptime | awk '{print $10}' | cut -d. -f1) -lt 4 ] \u0026\u0026 /path/to/script.sh Good and Bad Design Cron is a powerful tool, but it can also be dangerous if not used properly. One common mistake is to use the root user’s crontab file to schedule tasks. This can lead to security vulnerabilities if the scheduled tasks are not properly secured. Another issue is that cron only executes tasks if the system is running. If the system is down during a scheduled task, the task will not be executed. This can be a problem for critical tasks that must be executed on schedule. On the other hand, cron is a reliable and flexible tool that can be used to automate a wide range of tasks. Its syntax is easy to understand and its scheduling capabilities are powerful. Conclusion Cron is a powerful tool for scheduling tasks on Unix-like systems. Its flexibility and reliability mak","date":"2023-03-16","objectID":"/2023/03/16/20230315_cron/:0:0","tags":["schedule","corn"],"title":"Corn: Unix-like Scheduing","uri":"/2023/03/16/20230315_cron/"},{"categories":["Hulk's NPM Choice"],"content":"Hulk’s npm choices: corn-parser ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:0:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 1: Basic Information Corn-parser is an npm package that parses cron syntax, including timezones. It is available for use as an npm package and the source code can be found on Github at https://github.com/harrisiirak/cron-parser. The package can be installed using npm with the command npm install cron-parser. Corn-parser has over 2 million weekly downloads and has over 30 dependent packages. The three most famous dependent packages are: kue - A priority job queue package for node.js with support for delayed jobs. node-cron - A simple cron-like job scheduler for Node.js. cron - A simple and flexible cron-like job scheduler for Node.js. Corn-parser is an essential tool for developers working on time-sensitive applications. It is a fast and efficient package that can handle complex cron expressions and timezones with ease. Corn-parser is built using a modular architecture that allows for easy extensibility and customization. The core functionality of the package is provided by the cron-parser.js file, which contains the main parsing logic. The index.js file provides an interface for the package and exports the necessary functions for use. ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:1:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 2: Basic Concept The design concept behind corn-parser is to provide a simple and flexible way to parse cron syntax. The package works by taking a cron expression as input and returning a set of dates that match the expression. It supports the full range of cron syntax, including seconds, minutes, hours, days of the month, months, days of the week, and timezones. Corn-parser is designed to be easy to use and intuitive. The package provides a range of options for customizing the parsing behavior, including the ability to specify a custom timezone. It also supports the use of aliases for common cron expressions, such as @daily or @hourly. One of the key benefits of corn-parser is its ability to handle timezones. The package supports a wide range of timezones, including UTC, EST, PST, and GMT. This makes it ideal for use in applications that need to handle scheduling across multiple timezones. ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:2:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 3: Most Common Usage One of the most common use cases for corn-parser is in scheduling tasks or jobs to run at specific times. The package can be used to generate a list of dates that match a given cron expression. The following code sample demonstrates how to use corn-parser to generate a set of dates that match a cron expression: const cronParser = require('cron-parser'); const cronExpression = '0 0 * * *'; // Run every day at midnight const interval = cronParser.parseExpression(cronExpression); const dates = interval.next(10); // Get the next 10 dates that match the expression console.log(dates); This code will output an array of 10 dates that match the cron expression. Corn-parser is highly customizable and can be used to implement a wide range of scheduling scenarios. For example, you can use corn-parser to schedule tasks to run at specific times of day, on specific days of the week, or at specific intervals. You can also use the package to generate a list of cron expressions that match a given set of dates. ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:3:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 4: Best Practices in Action When using corn-parser, it is important to follow best practices to ensure that your code is efficient and maintainable. One best practice is to cache the interval object returned by cronParser.parseExpression() to avoid unnecessary re-parsing of the cron expression. The following code sample demonstrates how to cache the interval object: const cronParser = require('cron-parser'); const cronExpression = '0 0 * * *'; // Run every day at midnight let interval; function getInterval() { if (!interval) { interval = cronParser.parseExpression(cronExpression); } return interval; } const dates = getInterval().next(10); // Get the next 10 dates that match the expression console.log(dates); This code caches the interval object in a variable, which is returned by the getInterval() function. The interval object is only parsed once, when the function is first called, and is then re-used for subsequent calls. Another best practice when using corn-parser is to use a library like moment.js for manipulating dates and times. Moment.js provides a comprehensive set of date and time manipulation functions that can be used in conjunction with corn-parser to implement complex scheduling scenarios. ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:4:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 5: Conclusion Corn-parser is a powerful and flexible package for parsing cron syntax, including timezones. It is easy to use and can be customized and extended to meet your specific needs. By following best practices and caching the interval object, you can ensure that your code is efficient and maintainable. In conclusion, corn-parser is an essential tool for developers working on time-sensitive applications. Whether you need to schedule tasks to run at specific times, or you need to implement complex scheduling scenarios, corn-parser has the functionality and flexibility you need to get the job done. By following best practices and taking advantage of the wide range of customization options available, you can ensure that your code is efficient, maintainable, and reliable. So why not give corn-parser a try today? With its easy-to-use interface and powerful capabilities, it’s sure to become a go-to tool in your development toolkit. ","date":"2023-03-16","objectID":"/2023/03/16/20230315_npm_parser/:5:0","tags":["cron","parser"],"title":"Hulk's NPM Choices: corn-parser","uri":"/2023/03/16/20230315_npm_parser/"},{"categories":["Hulk's NPM Choice"],"content":"Hulk NPM Choices: Validator ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:0:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Introduction Data validation and sanitization are crucial aspects of any web application. In the world of JavaScript, the validator package is one of the most popular tools for string validation and sanitization. It provides a wide range of methods that make it easy to validate and sanitize strings, ensuring that your application is secure and performs well. In this blog, we will cover everything you need to know about the validator package, from its basic information to best practices for using it in your applications. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:1:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 1: Basic Information ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:2:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Source Code Link The source code for the validator package can be found on GitHub: https://github.com/validatorjs/validator.js. This link allows you to browse the source code and contribute to the package if you wish. The package is open-source, which means that you can use it for free and modify it to suit your needs. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:2:1","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Package Link The validator package can be found on the npm registry: https://www.npmjs.com/package/validator. This link provides information about the package, including its version history and dependencies. You can install the package in your Node.js project using the npm install validator command. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:2:2","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Dependents Data According to npms.io, the validator package has 3196 dependents as of August 2021. This means that many other packages rely on the validator package to provide string validation and sanitization capabilities. Some of the popular dependent packages include express-validator, mongoose-validator, and joi. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:2:3","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Top 3 Most Famous Dependent Packages As of August 2021, the top 3 most famous dependent packages of validator are: express-validator: A middleware for validating request bodies in Express.js applications. mongoose-validator: A plugin for validating and sanitizing Mongoose schema paths. joi: A powerful schema validation library for JavaScript. These packages demonstrate the versatility and usefulness of the validator package in a wide range of JavaScript applications. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:2:4","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 2: Basic Concept ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:3:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Design Concept The validator package is designed to be simple and easy to use, with a focus on performance and security. It provides a set of string validation and sanitization methods that can be used in both Node.js and browser-based applications. The package is organized into several modules, each of which provides a set of related methods. Some of the popular modules include is, to, and escape. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:3:1","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Key Technology or Architecture The validator package is written in JavaScript and is compatible with both Node.js and web browsers. It uses regular expressions and other string manipulation techniques to perform validation and sanitization tasks. One of the key benefits of the package is its simplicity, which makes it easy to integrate into any JavaScript application. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:3:2","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 3: Most Common Usage The validator package provides a wide range of string validation and sanitization methods, including checking for empty strings, validating email addresses, and converting strings to numbers. Here are some examples: const validator = require('validator'); console.log(validator.isEmail('example.com')); // false console.log(validator.isURL('\u003chttp://example.com\u003e')); // true console.log(validator.toInt('42')); // 42 These examples demonstrate the ease and power of the validator package in validating and sanitizing strings in JavaScript applications. By using these methods, you can ensure that your application is secure and reliable. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:4:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 4: Best Practices in Action When using the validator package, it is important to follow best practices to ensure that your code is secure and performs well. Here are some tips: Always sanitize user input to prevent XSS attacks. The validator package provides several methods for sanitizing strings, including escape() and stripTags(). Use the appropriate validation method for the data you are working with. The validator package provides many methods for different types of validation, such as isEmail() and isNumeric(). Avoid using regular expressions for validation when possible, as they can be insecure and slow. The validator package provides many methods for common validation tasks, so you can avoid the complexities of regular expressions. By following these best practices, you can ensure that your application is secure and performs well, even when dealing with complex string validation and sanitization tasks. ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:5:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"},{"categories":["Hulk's NPM Choice"],"content":"Chapter 5: Conclusion The validator package is a powerful and easy-to-use tool for validating and sanitizing strings in JavaScript applications. By providing a wide range of methods and following best practices, you can ensure that your application is secure and reliable. Whether you are building a simple website or a complex web application, the validator package is an essential tool for any JavaScript developer. In conclusion, the validator package is an excellent choice for anyone looking to implement string validation and sanitization in their JavaScript application. Its ease of use, performance, and security make it a popular choice among developers, and its wide range of methods ensures that you can handle any string validation or sanitization task with ease. So why not give it a try and see how it can improve the security and reliability of your application? ","date":"2023-03-14","objectID":"/2023/03/14/20230314_npm_validator/:6:0","tags":["hulk","npm","validator"],"title":"Hulk NPM Choices: Validator","uri":"/2023/03/14/20230314_npm_validator/"}]